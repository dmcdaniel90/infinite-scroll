{"mappings":"ACiBA,MAAM,EAAiB,SAAS,cAAc,CAAC,mBACzC,EAAmB,SAAS,cAAc,CAAC,qBAEjD,IAAI,EAAQ,CAAA,EAGR,EAAuB,EACvB,EAAsB,EACtB,EAA4B,EAAE,CAUlC,eAAe,IACb,GAAI,CACF,IAAM,EAAoB,MAAM,MARb,yGASb,EAAgB,MAAM,EAAQ,IAAI,GAGxC,GAAI,EAAS,MAAM,CACjB,MAAM,AAAI,MAAM,EAAS,MAAM,CAAC,OAAO,EAGvC,EAAc,EAiBlB,EAAe,EACf,EAAc,EAAY,MAAM,CAEhC,EAAY,GAAG,CAAC,AAAC,IAEf,IAAM,EAA0B,SAAS,aAAa,CAAC,KACvD,EAAc,EAAM,CAClB,KAAM,EAAM,KAAK,CAAC,IAAI,CACtB,OAAQ,SACR,MAAO,UACT,GAGA,IAAM,EAAwB,SAAS,aAAa,CAAC,OACrD,EAAc,EAAK,CACjB,IAAK,EAAM,IAAI,CAAC,OAAO,CACvB,IAAK,EAAM,eAAe,CAC1B,MAAO,EAAM,eAAe,AAC9B,GAGA,EAAI,gBAAgB,CAAC,OAAQ,OAiB3B,IAAiB,IACnB,EAAQ,CAAA,EAER,GAAkB,UAAU,IAAI,UAjBhC,GAGA,EAAK,WAAW,CAAC,GACjB,GAAgB,YAAY,EAC9B,EAtCA,CAAE,MAAO,EAAO,CACd,AAsDJ,CAAA,SAAkB,CAAU,EAE1B,IAAM,EAAmC,SAAS,aAAa,CAAC,MAC1D,EAAgC,SAAS,aAAa,CAAC,UACvD,EAAiC,SAAS,aAAa,CAAC,SAG9D,CAAA,EAAa,WAAW,CAAG,CAAC,EAAE,EAAM,OAAO,CAAC,yBAAyB,CAAC,CACtE,EAAc,EAAc,CAC1B,MAAO,OACT,GAGA,EAAc,EAAY,CACxB,IAAK,iFACL,YAAa,IACb,MAAO,aACT,GAGA,EAAY,WAAW,CAAG,QAC1B,EAAc,EAAa,CACzB,MAAO,cACT,GAGA,EAAY,gBAAgB,CAAC,QAAS,KACpC,OAAO,QAAQ,CAAC,MAAM,EACxB,GAGA,GAAgB,YAAY,GAC5B,GAAgB,YAAY,GAC5B,GAAgB,YAAY,GAG5B,GAAgB,UAAU,QAAQ,kBAAmB,mBAGrD,GAAkB,UAAU,IAAI,SAClC,CAAA,EA9Fa,GACT,QAAQ,KAAK,CAAC,EAChB,CACF,CAgHA,SAAS,EAAc,CAAoB,CAAE,CAA0B,EACrE,IAAK,IAAM,KAAO,EAChB,EAAQ,YAAY,CAAC,EAAK,CAAU,CAAC,EAAI,CAE7C,CA7IA,IA6HA,OAAO,gBAAgB,CAAC,SAAU,KAE9B,OAAO,WAAW,CAAG,OAAO,OAAO,EAAI,SAAS,IAAI,CAAC,YAAY,CAAG,KACpE,IAEA,EAAQ,CAAA,EACR,IAEJ","sources":["<anon>","src/script.ts"],"sourcesContent":["\"use strict\";\n// Select the Image Container and Loading Container by ID\nconst imageContainer = document.getElementById(\"image-container\");\nconst loadingContainer = document.getElementById(\"loading-container\");\nlet ready = false;\nlet isInitialLoad = true;\nlet requestCount = isInitialLoad ? 8 : 30;\nlet imagesLoaded = 0;\nlet totalImages = 0;\nlet photosArray = [];\n// Unsplash API\nconst ACCESS_KEY = \"yNiXBS7E0BE1WsNM4QbzcdNxtA7AdMzxUCHAs6Fy4i0\";\nconst apiURL = `https://api.unsplash.com/photos/random/?client_id=${ACCESS_KEY}&count=${requestCount}`;\n// On load\ngetPhotos();\n// Get photos\nasync function getPhotos() {\n    try {\n        const request = await fetch(apiURL);\n        const response = await request.json();\n        // Error handling\n        if (response.errors) throw new Error(response.errors.message);\n        else {\n            // Add photos to photosArray if no errors\n            photosArray = response;\n            // Ensures that each request after initial sets the requestCount to 30\n            isInitialLoad = false;\n            // Load Images\n            displayPhotos();\n        }\n    } catch (error) {\n        setError(error);\n        console.error(error);\n    }\n}\n// Create elements and add to the DOM\nfunction displayPhotos() {\n    // Used to keep track of total # of loaded images, see imageLoaded()\n    imagesLoaded = 0;\n    totalImages = photosArray.length;\n    photosArray.map((photo)=>{\n        // Create <a> to link to Unsplash\n        const item = document.createElement(\"a\");\n        setAttributes(item, {\n            href: photo.links.html,\n            target: \"_blank\",\n            class: \"img-link\"\n        });\n        // Create image element\n        const img = document.createElement(\"img\");\n        setAttributes(img, {\n            src: photo.urls.regular,\n            alt: photo.alt_description,\n            title: photo.alt_description\n        });\n        // Event listener, check when each is finished loading\n        img.addEventListener(\"load\", ()=>{\n            // Runs on each image's 'load' event\n            imageLoaded();\n        });\n        // Put <img> inside <a>, then put both inside imageContainer\n        item.appendChild(img);\n        imageContainer?.appendChild(item);\n    });\n}\n// Check if all images were loaded\nfunction imageLoaded() {\n    //Increment images loaded\n    imagesLoaded++;\n    // All images in the array should have fired the 'load' event\n    if (imagesLoaded === totalImages) {\n        ready = true;\n        // Hide loader\n        loadingContainer?.classList.add(\"hidden\");\n    }\n}\n// Sets an error page with a Lottie Animation\nfunction setError(error) {\n    // Create elements for error page\n    const errorMessage = document.createElement(\"h2\");\n    const errorImage = document.createElement(\"iframe\");\n    const retryButton = document.createElement(\"button\");\n    // Set error message to user\n    errorMessage.textContent = `${error.message}! Please try again later.`;\n    setAttributes(errorMessage, {\n        class: \"error\"\n    });\n    // Lottie Animation\n    setAttributes(errorImage, {\n        src: \"https://lottie.host/embed/df3eb377-7228-421e-a5b8-6a68da51dabd/uqPXNHpPbo.json\",\n        frameBorder: \"0\",\n        class: \"error-image\"\n    });\n    // Retry button\n    retryButton.textContent = \"Retry\";\n    setAttributes(retryButton, {\n        class: \"retry-button\"\n    });\n    // Reload window when retry button is clicked\n    retryButton.addEventListener(\"click\", ()=>{\n        window.location.reload();\n    });\n    // Put error elements in the DOM\n    imageContainer?.appendChild(errorMessage);\n    imageContainer?.appendChild(errorImage);\n    imageContainer?.appendChild(retryButton);\n    // Remove image container and show error container\n    imageContainer?.classList.replace(\"image-container\", \"error-container\");\n    // Hide loader\n    loadingContainer?.classList.add(\"hidden\");\n}\n// Load more photos if scroll is near bottom\n/**=======================\n * *       Infinite Scroll\n *  Viewport height + amount user has scrolled vertically >= height of body (box-sizing: padding) - 1000\n * Ex. const isScrolling = 1000px + 500px >= 1800 - 1000\n *\n *========================**/ window.addEventListener(\"scroll\", ()=>{\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000 && ready) {\n        ready = false;\n        getPhotos();\n    }\n});\n// Helper function to set attributes\nfunction setAttributes(element, attributes) {\n    for(const key in attributes)element.setAttribute(key, attributes[key]);\n}\n\n//# sourceMappingURL=index.b2145171.js.map\n","'use strict'\n\ninterface Photo {\n  urls: {\n    regular: string\n  }\n  alt_description: string\n  links: {\n    html: string\n  }\n}\n\ninterface HTMLAttributes {\n  [key: string]: string\n}\n\n// Select the Image Container and Loading Container by ID\nconst imageContainer = document.getElementById('image-container')\nconst loadingContainer = document.getElementById('loading-container')\n\nlet ready = false\nlet isInitialLoad = true\nlet requestCount: number = isInitialLoad ? 8 : 30\nlet imagesLoaded: number = 0\nlet totalImages: number = 0\nlet photosArray: Array<Photo> = []\n\n// Unsplash API\nconst ACCESS_KEY: string = 'yNiXBS7E0BE1WsNM4QbzcdNxtA7AdMzxUCHAs6Fy4i0'\nconst apiURL: string = `https://api.unsplash.com/photos/random/?client_id=${ACCESS_KEY}&count=${requestCount}`\n\n// On load\ngetPhotos()\n\n// Get photos\nasync function getPhotos(): Promise<void> {\n  try {\n    const request: Response = await fetch(apiURL)\n    const response: any = await request.json()\n\n    // Error handling\n    if (response.errors) {\n      throw new Error(response.errors.message)\n    } else {\n      // Add photos to photosArray if no errors\n      photosArray = response\n\n      // Ensures that each request after initial sets the requestCount to 30\n      isInitialLoad = false\n\n      // Load Images\n      displayPhotos()\n    }\n  } catch (error) {\n    setError(error)\n    console.error(error)\n  }\n}\n\n// Create elements and add to the DOM\nfunction displayPhotos(): void {\n  // Used to keep track of total # of loaded images, see imageLoaded()\n  imagesLoaded = 0\n  totalImages = photosArray.length\n\n  photosArray.map((photo) => {\n    // Create <a> to link to Unsplash\n    const item: HTMLAnchorElement = document.createElement('a')\n    setAttributes(item, {\n      href: photo.links.html,\n      target: '_blank',\n      class: 'img-link',\n    })\n\n    // Create image element\n    const img: HTMLImageElement = document.createElement('img')\n    setAttributes(img, {\n      src: photo.urls.regular,\n      alt: photo.alt_description,\n      title: photo.alt_description,\n    })\n\n    // Event listener, check when each is finished loading\n    img.addEventListener('load', (): void => {\n      // Runs on each image's 'load' event\n      imageLoaded()\n    })\n\n    // Put <img> inside <a>, then put both inside imageContainer\n    item.appendChild(img)\n    imageContainer?.appendChild(item)\n  })\n}\n\n// Check if all images were loaded\nfunction imageLoaded(): void {\n  //Increment images loaded\n  imagesLoaded++\n\n  // All images in the array should have fired the 'load' event\n  if (imagesLoaded === totalImages) {\n    ready = true\n    // Hide loader\n    loadingContainer?.classList.add('hidden')\n  }\n}\n\n// Sets an error page with a Lottie Animation\nfunction setError(error: any): void {\n  // Create elements for error page\n  const errorMessage: HTMLHeadingElement = document.createElement('h2')\n  const errorImage: HTMLIFrameElement = document.createElement('iframe')\n  const retryButton: HTMLButtonElement = document.createElement('button')\n\n  // Set error message to user\n  errorMessage.textContent = `${error.message}! Please try again later.`\n  setAttributes(errorMessage, {\n    class: 'error',\n  })\n\n  // Lottie Animation\n  setAttributes(errorImage, {\n    src: 'https://lottie.host/embed/df3eb377-7228-421e-a5b8-6a68da51dabd/uqPXNHpPbo.json',\n    frameBorder: '0',\n    class: 'error-image',\n  })\n\n  // Retry button\n  retryButton.textContent = 'Retry'\n  setAttributes(retryButton, {\n    class: 'retry-button',\n  })\n\n  // Reload window when retry button is clicked\n  retryButton.addEventListener('click', (): void => {\n    window.location.reload()\n  })\n\n  // Put error elements in the DOM\n  imageContainer?.appendChild(errorMessage)\n  imageContainer?.appendChild(errorImage)\n  imageContainer?.appendChild(retryButton)\n\n  // Remove image container and show error container\n  imageContainer?.classList.replace('image-container', 'error-container')\n\n  // Hide loader\n  loadingContainer?.classList.add('hidden')\n}\n\n// Load more photos if scroll is near bottom\n/**=======================\n * *       Infinite Scroll\n *  Viewport height + amount user has scrolled vertically >= height of body (box-sizing: padding) - 1000\n * Ex. const isScrolling = 1000px + 500px >= 1800 - 1000\n *\n *========================**/\nwindow.addEventListener('scroll', (): void => {\n  if (\n    window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000 &&\n    ready\n  ) {\n    ready = false\n    getPhotos()\n  }\n})\n\n// Helper function to set attributes\n\nfunction setAttributes(element: HTMLElement, attributes: HTMLAttributes): void {\n  for (const key in attributes) {\n    element.setAttribute(key, attributes[key])\n  }\n}\n"],"names":["imageContainer","document","getElementById","loadingContainer","ready","imagesLoaded","totalImages","photosArray","getPhotos","request","fetch","response","json","errors","Error","message","length","map","photo","item","createElement","setAttributes","href","links","html","target","class","img","src","urls","regular","alt","alt_description","title","addEventListener","classList","add","appendChild","error","setError","errorMessage","errorImage","retryButton","textContent","frameBorder","window","location","reload","replace","console","element","attributes","key","setAttribute","innerHeight","scrollY","body","offsetHeight"],"version":3,"file":"index.b2145171.js.map"}